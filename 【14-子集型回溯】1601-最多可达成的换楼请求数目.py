'''
我们有 n 栋楼，编号从 0 到 n - 1 。每栋楼有若干员工。由于现在是换楼的季节，部分员工想要换一栋楼居住。
给你一个数组 requests ，其中 requests[i] = [fromi, toi] ，表示一个员工请求从编号为 fromi 的楼搬到编号为 toi 的楼。
一开始 所有楼都是满的，所以从请求列表中选出的若干个请求是可行的需要满足 每栋楼员工净变化为 0 。意思是每栋楼 离开 的员工数目 等于 该楼 搬入 的员工数数目。比方说 n = 3 且两个员工要离开楼 0 ，一个员工要离开楼 1 ，一个员工要离开楼 2 ，如果该请求列表可行，应该要有两个员工搬入楼 0 ，一个员工搬入楼 1 ，一个员工搬入楼 2 。
请你从原请求列表中选出若干个请求，使得它们是一个可行的请求列表，并返回所有可行列表中最大请求数目。

示例 1：
输入：n = 5, requests = [[0,1],[1,0],[0,1],[1,2],[2,0],[3,4]]
输出：5
解释：请求列表如下：
从楼 0 离开的员工为 x 和 y ，且他们都想要搬到楼 1 。
从楼 1 离开的员工为 a 和 b ，且他们分别想要搬到楼 2 和 0 。
从楼 2 离开的员工为 z ，且他想要搬到楼 0 。
从楼 3 离开的员工为 c ，且他想要搬到楼 4 。
没有员工从楼 4 离开。
我们可以让 x 和 b 交换他们的楼，以满足他们的请求。
我们可以让 y，a 和 z 三人在三栋楼间交换位置，满足他们的要求。
所以最多可以满足 5 个请求。

示例 2：
输入：n = 3, requests = [[0,0],[1,2],[2,1]]
输出：3
解释：请求列表如下：
从楼 0 离开的员工为 x ，且他想要回到原来的楼 0 。
从楼 1 离开的员工为 y ，且他想要搬到楼 2 。
从楼 2 离开的员工为 z ，且他想要搬到楼 1 。
我们可以满足所有的请求。

示例 3：
输入：n = 4, requests = [[0,3],[3,1],[1,2],[2,0]]
输出：4
'''


### 方法一：选或不选
# 时间复杂度：O(n * 2 ^ m)
# 空间复杂度：O(n)
class Solution:
    def maximumRequests(self, n: int, requests: List[List[int]]) -> int:
        res = 0
        m = len(requests)
        house = [0] * n  # 房子状态，进+1，出-1

        def dfs(cnt, i):
            '''
            cnt: 已选择请求的数量
            i: 正在考虑第 i 个请求
            '''
            if i == m: # 终止条件
                if all(h == 0 for h in house):  # 若当前房子状态净变化是全0，比较答案
                    nonlocal res
                    res = max(res, cnt)
                return
            # 如果不选第 i 个请求
            dfs(cnt, i + 1)
            # 如果选第 i 个请求
            x, y = requests[i]
            house[x] -= 1
            house[y] += 1
            dfs(cnt + 1, i + 1)
            house[x] += 1  # 恢复现场
            house[y] -= 1  # 恢复现场

        dfs(0, 0)
        return res