'''
有 n 堆石头排成一排，第 i 堆中有 stones[i] 块石头。
每次 移动 需要将 连续的 k 堆石头合并为一堆，而这次移动的成本为这 k 堆中石头的总数。
返回把所有石头合并成一堆的最低成本。如果无法合并成一堆，返回 -1 。

示例 1：
输入：stones = [3,2,4,1], K = 2
输出：20
解释：
从 [3, 2, 4, 1] 开始。
合并 [3, 2]，成本为 5，剩下 [5, 4, 1]。
合并 [4, 1]，成本为 5，剩下 [5, 5]。
合并 [5, 5]，成本为 10，剩下 [10]。
总成本 20，这是可能的最小值。

示例 2：
输入：stones = [3,2,4,1], K = 3
输出：-1
解释：任何合并操作后，都会剩下 2 堆，我们无法再进行合并。所以这项任务是不可能完成的。

示例 3：
输入：stones = [3,5,1,2,6], K = 3
输出：25
解释：
从 [3, 5, 1, 2, 6] 开始。
合并 [5, 1, 2]，成本为 8，剩下 [3, 8, 6]。
合并 [3, 8, 6]，成本为 17，剩下 [17]。
总成本 25，这是可能的最小值。

提示：
n == stones.length
1 <= n <= 30
1 <= stones[i] <= 100
2 <= k <= 30
'''


'''
这是一个动态规划问题

状态定义：dp[i, j, p] 表示把第 i 堆到第 j 堆合并为 p 堆的最低成本

分为2种情况：
1. 若 p = 1，此时 dp[i, j, 1] = dp[i, j, k] + sum(stones[i: j + 1])
2. 若 p >= 2，此时 dp[i, j, p] = min(dp(i, q, 1) + dp(q + 1, j, p - 2))，其中 q = i + (k - 1) * x

状态转移方程：如上述分类讨论

边界条件：
dp[i, i, 1] = 0
'''


### 方法一：记忆化搜索
# 时间复杂度：O(n ^ 3)
# 空间复杂度：O(n ^ 2 * k)
class Solution:
    def mergeStones(self, stones: List[int], k: int) -> int:
        n = len(stones)
        if (n - 1) % (k - 1) != 0:
            return -1
        s = list(accumulate(stones, initial=0))  # 前缀和
        @cache
        def dfs(i, j, p):
            if p == 1:  # 合并成一堆
                if i == j:
                    return 0
                return dfs(i, j, k) + s[j + 1] - s[i]
            return min(dfs(i, q, 1) + dfs(q + 1, j, p - 1) for q in range(i, j, k - 1))
        return dfs(0, n - 1, 1)