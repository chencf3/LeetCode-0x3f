'''
你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都 围成一圈 ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警 。
给定一个代表每个房屋存放金额的非负整数数组，计算你 在不触动警报装置的情况下 ，今晚能够偷窃到的最高金额。

示例 1：
输入：nums = [2,3,2]
输出：3
解释：你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。

示例 2：
输入：nums = [1,2,3,1]
输出：4
解释：你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。
     偷窃到的最高金额 = 1 + 3 = 4 。

示例 3：
输入：nums = [1,2,3]
输出：3

提示：
1 <= nums.length <= 100
0 <= nums[i] <= 1000
'''


'''
这是一个动态规划问题

状态定义：dp[i] 表示到第 i 个房屋的最大金额

状态转移方程：dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])

这题是198题的升级版，所以只考虑最优的空间优化解法
分为两种情况：
1. 不偷第一个房屋，考虑 nums[1:]
2. 不偷最后一个房屋，考虑 nums[:-1]
取上述两种情况的最大值即可
'''


### 方法一：空间优化
# 时间复杂度：O(n)
# 空间复杂度：O(1)
class Solution:
    def rob(self, nums: List[int]) -> int:
        if len(nums) == 1:
            return nums[0]
        
        def func(nums):
            left, right = 0, 0
            for num in nums:
                left, right = right, max(right, left + num)
            return right
        
        return max(func(nums[:-1]), func(nums[1:]))